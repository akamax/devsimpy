# -*- coding: Latin-1 -*-

import sys
sys.setrecursionlimit(10000)


from DEVS import AtomicDEVS, CoupledDEVS
from simulator import Simulator
from infinity import INFINITY


class GenerateurListe(AtomicDEVS):
    def __init__(self, name):
        AtomicDEVS.__init__(self, name)
        self.sigma=0
        self.op = self.addOutPort("op")
        self.liste=[91,26,353,62,392,377,431,519,281,198,612,82,813,946,427,50,148,514,74,875,549,282,6,843,853,147,704,295,5,40,165,504,763,248,1000,888,563,866,443,787,444,838,156,638,689,967,157,197,607,408,372,485,53,410,263,183,153,8,961,990,297,721,553,647,901,108,968,561,266,345,822,933,395,359,137,319,662,422,39,264,631,651,131,86,891,148,692,279,264,948,490,609,963,808,827,797,305,773,273,1000,894,188,922,716,392,571,816,543,780,942,202,609,466,182,516,474,66,516,766,251,887,276,297,865,249,480,134,17,320,276,877,844,894,220,73,470,172,529,893,503,277,177,407,914,583,843,275,799,783,349,290,989,221,632,575,356,98,906,348,640,972,708,523,910,869,863,186,508,225,941,320,270,189,277,153,765,751,190,86,472,525,19,771,441,485,533,916,802,427,22,615,817,56,39,582,400,372,487,275,519,352,506,215,667,736,365,999,552,695,546,735,276,771,977,550,871,72,389,130,87,819,159,376,22,815,224,832,642,907,6,251,324,557,935,337,264,944,374,675,429,957,935,109,630,541,318,706,41,630,543,33,953,6,135,943,487,470,13,494,65,321,831,359,986,286,774,63,118,858,68,888,31,61,855,619,712,750,130,848,929,777,121,224,476,926,223,979,87,960,346,70,426,84,934,103,551,401,618,700,577,737,112,773,422,564,504,34,184,529,558,646,747,622,774,634,945,58,969,960,342,37,474,634,955,570,410,877,956,957,286,291,323,645,655,960,410,51,157,984,298,632,930,797,246,524,212,921,315,665,487,202,976,404,887,40,330,678,979,896,69,45,357,771,958,882,407,992,103,767,462,588,261,860,351,273,664,245,956,319,778,255,38,630,994,484,211,510,833,38,336,105,614,953,625,971,239,384,374,661,234,896,956,71,25,777,561,168,392,470,774,427,48,774,848,471,683,255,468,563,241,827,137,564,655,542,297,392,11,368,297,682,833,651,672,689,744,282,245,799,923,188,900,260,907,489,606,367,999,230,280,485,981,989,127,514,620,826,599,635,135,269,97,455,307,489,370,221,141,965,239,717,176,160,790,263,530,893,573,45,507,767,506,894,821,531,38,284,43,124,78,265,9,504,339,789,469,512,994,434,507,391,643,262,834,518,59,683,763,522,964,65,148,341,816,363,797,133,438,798,77,735,263,621,516,21,614,344,371,197,317,29,1,326,769,759,444,942,985,234,986,335,46,782,379,655,172,879,897,954,250,119,49,789,390,267,761,18,822,785,729,519,962,98,21,961,504,64,632,277,543,478,466,185,34,106,904,778,849,181,147,348,312,454,464,156,525,740,512,465,85,436,650,135,318,408,677,38,267,633,121,455,612,856,7,381,72,975,725,759,351,321,903,145,658,633,119,645,196,725,343,488,680,156,406,499,623,576,16,284,31,389,496,539,436,722,487,531,621,825,811,931,686,292,239,712,673,114,939,974,51,432,948,221,264,352,295,138,729,542,609,152,365,373,953,282,806,895,405,575,245,346,883,724,567,451,815,224,481,353,892,205,875,235,822,616,28,524,721,161,906,397,7,555,262,25,454,1000,310,364,5,528,737,784,508,823,219,455,562,984,619,575,175,523,510,914,490,491,910,993,752,2,556,629,141,561,73,313,764,760,571,52,715,180,864,870,801,244,936,859,549,507,21,428,466,883,318,626,776,950,16,29,801,603,549,335,112,228,654,30,363,920,849,293,104,376,882,979,633,929,282,935,103,665,869,580,38,723,340,358,946,172,298,711,513,943,425,302,752,887,202,162,743,155,190,306,720,942,913,591,832,779,519,824,398,143,352,346,859,837,501,51,59,653,50,367,15,595,174,937,893,355,489,877,733,974,336,264,784,526,635,32,185,834,282,952,525,839,257,663,922,253,641,316,984,688,851,203,391,5,635,995,158,600,968,385,150,120,470,41,688,569,777,5,815,22,174,729,806,916,975,863,373,160,176,335,616,286,467,808,104,537,108,848,676,478,713,983,759,549,820,274,310,112,866,268,509,685,529,635,905,277,310,881,777,183,39,999,202,301,743,753,181,42,428,812,4,392,367,523,502,376,54,192,615,481,396,215,284,936,445,978,138,910,41,641,883,76,83,453,498,779,671,400,801,859,153,364,445,1,173,477,58,778,603,327,390,379,858,970,854,771,493,574,867,996,551,283,20,992,752,36,121,328,672,543,534,561,205,820,547,430,186,846,311,750,13,259,40,101,532,462,80,291,316,664,998,937,140,168,479,359,657,656,291,102,9,292,718,634,540,432,9,261,878,571,526,876,24,236,970,614,37,572,842,643,775,75,859,898,904,748,771,773,322,114,392,35,33,574,643,417,472,874,237,387,341,481,560,295,291,985,626,299,558,808,943,477,519,641,929,819,720,710,936,773,339,51,809,984,17,687,411,483,335]#,581,856,531,449,540,124,600,724,474,951,687,234,745,550,162,622,805,281,541,47,811,459,645,471,884,795,14,347,149,430,410,251,191,892,991,699,725,340,922,296,359,519,649,158,345,353,706,481,335,879,220,805,688,964,984,740,42,403,131,674,93,790,651,217,150,550,58,232,916,684,144,976,613,350,209,21,450,1000,250,228,549,930,20,131,574,915,798,339,286,866,878,464,944,806,132,733,566,302,538,341,472,621,936,215,637,872,85,734,177,37,428,33,107,131,594,256,353,650,250,87,576,190,683,720,790,300,975,356,854,416,930,62,74,488,265,154,593,491,150,419,586,154,316,214,189,817,100,574,935,428,905,967,14,218,359,35,116,108,350,694,623,738,471,949,361,446,885,463,465,940,716,374,619,749,704,240,371,140,377,220,967,134,114,434,709,856,437,339,458,645,87,818,904,64,837,637,49,951,188,648,686,64,700,770,677,949,971,717,816,765,172,95,552,721,220,32,208,313,433,499,615,735,176,475,518,189,196,633,883,821,142,318,307,964,967,781,366,880,521,747,823,317,408,649,784,451,397,333,101,265,47,393,366,542,699,415,796,535,380,473,906,428,438,817,756,650,381,930,934,572,218,145,941,53,594,855,746,21,473,916,221,70,352,815,986,998,436,129,175,140,50,923,197,830,588,67,983,166,122,171,289,689,30,869,925,216,558,741,688,63,559,575,513,705,503,478,21,273,554,583,239,923,137,885,858,68,63,955,879,903,36,939,612,253,926,531,990,426,444,670,229,784,923,641,421,888,58,855,188,163,517,352,689,955,161,18,974,844,512,717,21,486,571,761,145,458,663,6,660,557,801,447,248,432,364,842,644,194,891,466,921,734,551,604,80,519,190,907,801,248,661,944,319,992,657,735,185,984,100,347,720,197,630,831,725,812,976,940,765,462,622,409,896,114,93,919,760,544,376,647,413,402,707,278,297,716,228,110,924,982,707,839,410,524,908,674,440,851,911,106,586,886,446,65,867,53,498,683,503,89,129,578,303,236,179,485,100,114,786,537,428,381,964,995,358,119,832,775,390,575,767,2,471,176,231,274,28,255,787,413,998,263,229,834,713,775,394,420,863,301,90,854,454,861,91,247,834,527,631,397,987,810,90,440,962,450,643,254,959,262,314,490,568,691,234,547,885,21,688,244,304,520,710,511,88,647,251,338,424,175,675,477,265,383,189,808,703,49,90,912,426,227,892,236,735,546,621,982,346,670,9,684,43,370,372,996,459,531,522,260,56,315,279,984,500,361,119,20,674,978,785,667,72,454,512,101,817,141,99,632,970,668,956,412,322,654,851,353,300,522,955,452,146,694,819,430,909,236,823,476,357,958,297,369,433,200,978,492,51,241,915,413,821,324,300,450,342,872,595,44,917,314,307,841,175,19,67,772,866,81,585,773,24,560,510,879,270,430,471,327,480,651,94,126,121,388,795,512,472,49,18,683,301,470,611,61,707,202,972,335,855,250,823,681,200,620,94,249,102,491,98,341,571,241,249,27,750,700,502,945,585,844,928,504,731,356,188,643,769,758,307,282,650,938,52,989,131,718,403,785,686,736,938,211,90,481,522,653,455,520,21,371,302,243,279,79,980,227,750,687,297,826,124,107,298,957,96,215,526,486,727,542,594,71,751,21,507,818,731,204,786,820,455,900,919,840,684,768,980,185,531,400,69,460,751,644,291,401,680,451,859,85,230,727,67,692,102,30,165,489,427,516,809,562,619,70,251,309,809,806,880,585,648,93,472,931,311,440,124,657,739,95,79,502,803,780,145,265,700,480,549,139,397,906,501,73,283,963,911,604,913,4,231,973,28,147,365,279,210,301,63,44,390,918,741,946,329,250,688,639,591,0,127,839,800,712,624,510,985,566,620,725,929,67,52,832,149,611,319,821,834,901,251,128,791,194,561,780,603,192,439,541,349,809,447,842,832,779,487,717,900,170,91,42,861,175,691,170,875,477,427,326,1000,975,56,840,87,263,278,943,597,200,522,263,273,178,929,494,918,666,581,739,566,765,487,985,521,837,105,983,294,185,854,775,902,764,402,542,512,23,491,962,588,370,559,229,716,661,776,643,228,586,938,268,384,668,480,433,126,276,925,439,44,353,561,692,676,529,556,419,917,203,209,827,155,532,293,63,885,367,148,336,407,261,996,89,566,489,999,327,926,858,801,472,35,350,592,821,116,814,997,191,405,492,929,242,496,279,641,478,726,856,210,197,752,587,827,473,518,47,320,829,412,42,259,285,834,708,759,261,441,527,311,170,96,498,309,652,975,956,334,602,67,57,942,119,524,813,949,169,269,419,316,59,867,991,805,543,572,442,618,798,366,251,659,261,518,185,483,668,747,471,593,480,481,326,84,454,652,189,741,216,671,563,525,567,494,874,514,991,974,181,279,361,883,992,987,753,964,934,750,336,238,603,737,558,847,494,22,661,805,217,537,531,189,753,427,699,751,886,740,924,288,326,884,252,26,711,15,330,420,163,803,135,312,909,44,442,388,178,973,243,726,69,14,98,617,182,956,108,770,832,821,666,39,692,95,986,129,476,378,118,655,622,514,72,49,201,186,411,19,770,375,727,73,719,933,826,781,730,567,957,684,884,547,233,260,411,834,128,549,140,465,754,247,613,13,737,631,797,594,49,61,898,611,666,969,805,164,386,188,251,696,521,661,739,246,548,781,381,679,124,589,928,984,558,887,751,837,922,58,520,102,472,417,453,485,837,0,701,364,192,413,803,480,619,82,775,90,615,171,218,114,253,36,206,633,737,891,34,406,198,591,631,947,764,229,922,754,122,211,459,471,742,945,636,301,291,481,489,533,321,94,317,501,694,564,138,923,774,123,190,546,144,204,178,482,476,487,719,186,90,67,3,2,115,64,316,622,215,10,175,740,44,509,181,511,952,117,178,439,276,366,986,271,999,935,925,61,633,927,76,686,226,950,144,296,115,437,707,396,767,773,487,109,305,324,767,600,227,823,119,188,583,9,828,558,37,362,464,949,486,366,675,975,138,802,61,92,848,337,866,659,242,266,691,991,489,932,121,518,672,424,668,178,428,924,625,232,512,391,458,685,559,281,544,662,507,877,519,38,418,141,293,87,619,436,768,663,290,591,40,591,939,544,739,299,342,123,923,678,222,252,1000,711,228,170,659,630,953,163,598,889,561,995,581,765,901,560,614,165,448,605,702,780,141,428,680,492,28,295,731,78,882,902,799,332,719,43,761,609,455,54,823,86,903,834,633,263,812,47,263,670,434,555,966,122,653,191,468,856,466,351,22,14,121,251,468,645,858,842,178,869,262,156,417,925,587,406,471,984,465,832,78,185,28,521,892,752,938,619,596,217,192,110,105,862,778,761,933,791,8,714,570,886,148,1,741,225,434,260,960,152,445,1000,947,988,284,559,589,147,111,49,529,383,631]
        #self.liste=[122,45,7,8,999,5,66,5,17,45,23,69,85,11,22,3,78,44,15,65,88,95,63,21]
        self.liste=[9, 8, 7, 6, 5, 4, 3, 2]

    def timeAdvance(self):
        return self.sigma

    def outputFnc(self):
        return {self.op: [self.liste]}

    def intTransition(self):
        self.sigma=INFINITY
        return self.state

class TriFusion(AtomicDEVS):
    def __init__(self, name):
        AtomicDEVS.__init__(self, name)
        self.state = True
        self.sigma = INFINITY

        self.type=0;
        self.ip1 = self.addInPort("ip1")
        self.ip2 = self.addInPort("ip2")

        self.op1 = self.addOutPort("op1")
        self.op2 = self.addOutPort("op2")
        self.liste = []

    def timeAdvance(self):
        return self.sigma

    def outputFnc(self):
        if self.getType()==1:
            lenListe=len(self.liste)
            return {self.op1: [self.liste[0:lenListe/2]], self.op2: [self.liste[lenListe/2:lenListe]] }
        elif self.getType()==0:
            listeTriee=self.tri_fusion(self.liste)
            return {self.op1 : [listeTriee]}
        else:
            return {self.op1 : [self.liste] }


    def intTransition(self):
        self.sigma=INFINITY
        
        return self.state

    def extTransition(self, inputs):
        modelType=self.getType()
        self.sigma=0
        if modelType==1 ||:
            self.liste = inputs[self.ip1][0]
        elif modelType==0:
            self.liste = inputs[self.ip1][0]
            #self.liste=self.tri_fusion(self.liste)
        else:
            l1 = inputs[self.ip1][0]
            l2 = inputs[self.ip2][0]
            self.liste = self.fusion(l1, l2)
        return self.state

    def getType(self):
        if len(self.ip2.inLine)>0:
            return 2
        elif len(self.op2.outLine)>0:
            return 1
        return 0

    def insere(self, x, liste):
        if liste==[]:
            return [x]
        elif x<=liste[0]:
            return [x] + liste
        else:
            return [liste[0]] + self.insere(x,liste[1:len(liste)])

    def fusion(self, liste1, liste2):
        if liste1==[]:
            return liste2
        elif liste2==[]:
            return liste1
        else:
            return self.fusion(liste1[1:len(liste1)], self.insere(liste1[0],liste2))

    def tri_fusion(self, liste):
        n=len(liste)
        if n==0 or n==1:
            return liste
        else:
            return self.fusion(self.tri_fusion(liste[0:n/2]), self.tri_fusion(liste[n/2:n]))



class CoupledTriFusionT0(CoupledDEVS):
    def __init__ (self):
        CoupledDEVS.__init__ (self ,"CoupledTriFusion")
        self.trifusion = self.addSubModel(TriFusion("trifusionT0"))
        self.ip = self.addInPort ("ip")
        self.op = self.addOutPort("outport")
        self.connectPorts (self.ip , self.trifusion.ip1)
        self.connectPorts (self.trifusion.op1, self.op)


#===============================================================================
# class CoupledTriFusionT1(CoupledDEVS):
#     def __init__ (self):
#         CoupledDEVS.__init__ (self ,"CoupledTriFusion")
#         self.trifusion = self.addSubModel(TriFusion("trifusionT1"))
#         self.ip = self.addInPort ("ip")
#         self.op1 = self.addOutPort("outport1")
#         self.op2 = self.addOutPort("outport2")
#
#         self.connectPorts (self.ip , self.trifusion.ip1)
#         self.connectPorts (self.trifusion.op1, self.op1)
#         self.connectPorts (self.trifusion.op2, self.op2)
# class CoupledTriFusionT2(CoupledDEVS):
#     def __init__ (self):
#         CoupledDEVS.__init__ (self ,"CoupledTriFusion")
#         self.trifusion = self.addSubModel(TriFusion("trifusionT2"))
#         self.inPort1 = self.addInPort ("inport1")
#         self.inPort2 = self.addInPort ("inport2")
#         self.outPort = self.addOutPort("outport")
#
#         self.connectPorts (self.inPort1 , self.trifusion.ip1)
#         self.connectPorts (self.inPort2 , self.trifusion.ip2)
#         self.connectPorts (self.trifusion.op1, self.outPort)
#===============================================================================


class ModeleTriFusion(CoupledDEVS):
    def __init__ (self):
        CoupledDEVS.__init__(self, "modeletrifusion")
        self.op = self.addOutPort("oport")

        self.generateur = self.addSubModel(GenerateurListe("generateur"))

        self.trifusion1_1 = self.addSubModel(TriFusion("trifusion1_1"))
        self.trifusion1_2 = self.addSubModel(TriFusion("trifusion1_2"))
        self.trifusion1_3 = self.addSubModel(TriFusion("trifusion1_3"))



        self.ctrifusion0_1 = self.addSubModel(CoupledTriFusionT0())
        self.ctrifusion0_2 = self.addSubModel(CoupledTriFusionT0())
        self.ctrifusion0_3 = self.addSubModel(CoupledTriFusionT0())
        self.ctrifusion0_4 = self.addSubModel(CoupledTriFusionT0())



        self.trifusion2_1 = self.addSubModel(TriFusion("trifusion2_1"))
        self.trifusion2_2 = self.addSubModel(TriFusion("trifusion2_2"))
        self.trifusion2_3 = self.addSubModel(TriFusion("trifusion2_3"))

        #Connexion 1
        self.connectPorts (self.generateur.op , self.trifusion1_1.ip1)

        #Connexion 2
        self.connectPorts(self.trifusion1_1.op1, self.trifusion1_2.ip1)
        self.connectPorts(self.trifusion1_1.op2, self.trifusion1_3.ip1)

        #Connexion 3
        self.connectPorts(self.trifusion1_2.op1, self.ctrifusion0_1.ip)
        self.connectPorts(self.trifusion1_2.op2, self.ctrifusion0_2.ip)

        #Connexion 4
        self.connectPorts(self.trifusion1_3.op1, self.ctrifusion0_3.ip)
        self.connectPorts(self.trifusion1_3.op2, self.ctrifusion0_4.ip)

        #Connexion 5
        self.connectPorts(self.ctrifusion0_1.op, self.trifusion2_1.ip1)
        self.connectPorts(self.ctrifusion0_2.op, self.trifusion2_1.ip2)

        #Connexion 6
        self.connectPorts(self.ctrifusion0_3.op, self.trifusion2_2.ip1)
        self.connectPorts(self.ctrifusion0_4.op, self.trifusion2_2.ip2)

        #Connexion 7
        self.connectPorts(self.trifusion2_1.op1, self.trifusion2_3.ip1)
        self.connectPorts(self.trifusion2_2.op1, self.trifusion2_3.ip2)
